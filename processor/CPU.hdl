// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	PC(in=RA, inc=true, load=BoolJump, reset=reset, out[0..14]=pc);
	// if instruction[15] is set the instruction is
	// a C-instruction (compute-instruction),
	// otherwise an A-instruction(address-instuction)
	Not(in=instruction[15], out=BoolAinstruct);

	Or(a=BoolLoadRAC, b=BoolAinstruct, out=BoolLoadRA);
	ARegister(in=newRA, load=BoolLoadRA, out=RA, out[0..14]=addressM);

	DRegister(in=internalOutALUdata, load=BoolLoadRD, out=RD);

	Mux16(a=instruction, b=internalOutALUdata, sel=instruction[15], out=newRA);
	Mux16(a=RA, b=inM, sel=instruction[12], out=Aluy);

	//======C instruction==========================================
	// if instruction[15] -> C-instruction (compute instruction)===
	//=============================================================

	ALU(
		x=RD,
		y=Aluy,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		out=internalOutALUdata,
		out=outM,
		zr=BoolAluZero,
		ng=BoolAluNegative
	);
	//=======implicit ALU output booleans===
	Or(a=BoolAluZero, b=BoolAluNegative, out=BoolAluNegativeZero);
	Not(in=BoolAluNegativeZero, out=BoolAluPositive);
	Or(a=BoolAluPositive, b=BoolAluNegative, out=BoolAluNegativePositive);
	Or(a=BoolAluPositive, b=BoolAluZero, out=BoolAluZeroPositive);
	//=======determine WRITE===============
	DMux8Way(
		in=instruction[15],
		sel=instruction[3..5],
		b=BoolLoadRM1,
		c=BoolLoadRD1,
		d=BoolLoadRMRD,
		e=BoolLoadRA1,
		f=BoolLoadRARM1,
		g=BoolLoadRARD1,
		h=BoolLoadRARMRD
	);
	// load A?
	Or(a=BoolLoadRA1, b=BoolLoadRARM1, out=BoolLoadRA2);
	Or(a=BoolLoadRARD1, b=BoolLoadRARMRD, out=BoolLoadRARD);
	Or(a=BoolLoadRARD, b=BoolLoadRA2, out=BoolLoadRAC);
	//load RM? (memory)
	Or(a=BoolLoadRMRD, b=BoolLoadRM1, out=BoolLoadRM2);
	Or(a=BoolLoadRARMRD, b=BoolLoadRARM1, out=BoolLoadRARM);
	Or(a=BoolLoadRARM, b=BoolLoadRM2, out=writeM);
	//load RD?
	Or(a=BoolLoadRARD, b=BoolLoadRD1, out=BoolLoadRD2);
	Or(a=BoolLoadRD2, b=BoolLoadRMRD, out=BoolLoadRD);
	//=======determine JUMP================
	DMux8Way(
		in=instruction[15],
		sel=instruction[0..2],
		b=BoolJGT,
		c=BoolJEQ,
		d=BoolJGE,
		e=BoolJLT,
		f=BoolJNE,
		g=BoolJLE,
		h=BoolJMP1
	);
	And(a=BoolJGT, b=BoolAluPositive, out=BoolJMP2);
	And(a=BoolJEQ, b=BoolAluZero, out=BoolJMP3);
	And(a=BoolJGE, b=BoolAluZeroPositive, out=BoolJMP4);
	And(a=BoolJLT, b=BoolAluNegative, out=BoolJMP5);
	And(a=BoolJLE, b=BoolAluNegativeZero, out=BoolJMP6);
	And(a=BoolJNE, b=BoolAluNegativePositive, out=BoolJMP7);
	Or8Way(
		in[0]=BoolJMP1,
		in[1]=BoolJMP2,
		in[2]=BoolJMP3,
		in[3]=BoolJMP4,
		in[4]=BoolJMP5,
		in[5]=BoolJMP6,
		in[6]=BoolJMP7,
		in[7]=false,
		out=BoolJump
	);
	//=====================================
}
